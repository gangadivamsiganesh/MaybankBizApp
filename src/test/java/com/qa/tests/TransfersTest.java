package com.qa.tests;

import static org.testng.Assert.assertTrue;

import java.lang.reflect.Method;

import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import com.qa.BaseTest;
import com.qa.pages.AddFavSuccessfulPage;
import com.qa.pages.AddFavTypePage;
import com.qa.pages.ApprovalDashboardPage;
import com.qa.pages.ApprovalFilterPage;
import com.qa.pages.BankListPage;
import com.qa.pages.BankingDashboardPage;
import com.qa.pages.BillerDetailsPage;
import com.qa.pages.BusinessProfilePage;
import com.qa.pages.CalenderPage;
import com.qa.pages.ConfirmationPage;
import com.qa.pages.ControlCenterPage;
import com.qa.pages.DuitNowSelectIDPage;
import com.qa.pages.EnterAmountPage;
import com.qa.pages.LoginPage;
import com.qa.pages.LogoutPage;
import com.qa.pages.MyDevicesPage;
import com.qa.pages.NotificationPage;
import com.qa.pages.OtpPage;
import com.qa.pages.PayFromPage;
import com.qa.pages.PaymentsDashboardPage;
import com.qa.pages.PaymentsDetailsPage;
import com.qa.pages.ReviewDetailsPage;
import com.qa.pages.SettingsPage;
import com.qa.pages.ThankYouPage;
import com.qa.pages.TransferDashboardPage;
import com.qa.pages.TransferDetailsPage;
import com.qa.pages.TransferFromPage;
import com.qa.pages.TransferToPage;
import com.qa.utils.TestUtils;

import io.appium.java_client.MobileBy;
import io.appium.java_client.MobileElement;

public class TransfersTest extends BaseTest{
	LoginPage loginPage;
	OtpPage otpPage;
	BankingDashboardPage dashboardPage;
	ControlCenterPage controlCenterPage;
	NotificationPage notificationPage;
	BusinessProfilePage profilePage;
	LogoutPage logoutPage;
	ConfirmationPage confirmationPage;
	PaymentsDashboardPage paymentsDashboardPage;
	PayFromPage payFromPage;
	BillerDetailsPage billerDetailsPage;
	EnterAmountPage enterAmountPage;
	PaymentsDetailsPage paymentsDetailsPage;
	ReviewDetailsPage reviewDetailsPage;
	ThankYouPage thankYouPage;
	CalenderPage calenderPage;
	AddFavSuccessfulPage addFavSuccessfulPage;
	AddFavTypePage addFavTypePage;
	TransferDashboardPage transferDashboardPage;
	TransferFromPage transferFromPage;
	TransferToPage transferToPage;
	TransferDetailsPage transferDetailsPage;
	BankListPage bankListPage;
	DuitNowSelectIDPage duitNowSelectIDPage;
	SettingsPage settingsPage;
	MyDevicesPage myDevicesPage;
	ApprovalDashboardPage approvalDashboardPage;
	ApprovalFilterPage approvalFilterPage;
	TestUtils utils = new TestUtils();

	@BeforeMethod(alwaysRun=true)
	public void beforeMethod(Method m) {
		loginPage=new LoginPage();
		System.out.println("\n" + "***********Starting Test:" +m.getName() +"************"+"\n");

	}
	@AfterMethod(alwaysRun=true)
	public void afterMethod(Method m) {
		closeApp();
		launchApp();
	}
	


	
	@Test(groups = { "SmokeTest","RegressionTest" })
	public void tc001_Immediate_OwnAccount_Transfer() throws Throwable {
		
		SoftAssert softAssert=new SoftAssert();
		changeToMaker();
		transferDashboardPage=dashboardPage.clickTransferIcon();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		transferFromPage=transferDashboardPage.clickOwnAccountTransferLoanTransferIcon();
		Assert.assertTrue(transferFromPage.verifyTransferFromPageDisplayed());
		String fromAccName=transferFromPage.getAccountName();
		String fromAccNumber=transferFromPage.getAccountNumber();
		String availBal=transferFromPage.getAmount();
		transferToPage=transferFromPage.clickTransferFromAccount();
		Assert.assertTrue(transferToPage.verifyTransferToPageDisplayed());
		String toAccName=transferToPage.getAccountName();
		String toAccNumber=transferToPage.getAccountNumber();
		String availBal_toAcc=transferToPage.getAmount();
		enterAmountPage=transferToPage.clickTransferToAccount();
		Assert.assertTrue(enterAmountPage.verifyEnterAmountPageDisplayed());
		String amount=randomString("numeric",2);
		transferDetailsPage=enterAmountPage.enterTransferAmount(amount);
		Assert.assertTrue(transferDetailsPage.verifyOwnAccountTransferDetailsPageDisplayed());
		String fromAccName_TD=transferDetailsPage.getTransferFromAccName();
		String fromAccNumber_TD=transferDetailsPage.getTransferFromAccNumber();
		softAssert.assertEquals(fromAccName_TD, fromAccName,"From Account Name on transfer details page is not matching");
		softAssert.assertEquals(fromAccNumber_TD, fromAccNumber,"From Account Number on transfer details page is not matching");
		String toAccName_TD=transferDetailsPage.getTransferToAccName();
		String toAccNumber_TD=transferDetailsPage.getTransferToAccNumber();
		softAssert.assertEquals(toAccName_TD, toAccName,"To Account Name on transfer details page is not matching");
		softAssert.assertEquals(toAccNumber_TD, toAccNumber,"To Account Number on transfer details page is not matching");
		String amount_TD=transferDetailsPage.getAmount();
		softAssert.assertEquals(amount_TD, amount.concat(".00"),"Amount on transfer details page is not matching");
		String recieptReference=randomString("alphabetic",7);
		String paymentDetails=randomString("alphabetic",8);
		transferDetailsPage.enterReceiptRefrencePaymentDetails(recieptReference,paymentDetails);
		//transferDetailsPage.enterPaymentDetails(paymentDetails);
		reviewDetailsPage=transferDetailsPage.clickContinueButton();
		Assert.assertTrue(reviewDetailsPage.verifyReviewDetailsPageDisplayed());
		String transferToHeader=reviewDetailsPage.getTransferToLabel();
		verifyText(transferToHeader,"Transfer To");
		verifyText(reviewDetailsPage.getTransferToAccountName(),toAccName);
		softAssert.assertTrue(reviewDetailsPage.verifyToAccountNumberLabelDisplayed(), "To Account number on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNameLabelDisplayed(), "From Account Name on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNumberLabelDisplayed(), "From Account Number on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyReciepientRefrenceLabelDisplayed(), "Recipient Reference on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyPaymentDetailsLabelDisplayed(), "Payment Details on review details is not displayed");
		String amountRD=reviewDetailsPage.getAmount();
		verifyText(amount.concat(".00"),amountRD);
		verifyText(reviewDetailsPage.getToAccountNumber(),toAccNumber);
		verifyText(reviewDetailsPage.getFromAccountNameAccountName(),fromAccName);
		verifyText(reviewDetailsPage.getFromAccountNameAccountNumber(),fromAccNumber);
		verifyText(reviewDetailsPage.getRecipientReferenceValue(),recieptReference);
		verifyText(reviewDetailsPage.getPaymentDetailsValue(),paymentDetails);
		thankYouPage=reviewDetailsPage.clickContinueButton();
		Assert.assertTrue(thankYouPage.verifyThankYouPageDisplayed());
		verifyText(thankYouPage.getThankYouPageHeader(),"Transaction Successful");
		verifyTextContains(thankYouPage.getThankYouPageHeaderDate(),"Own Account Transfer");
		verifyTextContains(amount.concat(".00"),thankYouPage.getAmountValue());
		thankYouPage.getRefrenceIDValue();
		verifyText(thankYouPage.getStatusValue(),"Successful");
		softAssert.assertTrue(thankYouPage.verifyTransferToLabelDisplayed(),"Transfer To label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyFromAccountLabelDisplayed(),"From Account label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyAvailBalanceLabelDisplayed(),"Available Balance label on Thank you page is not displayed");
		String AvailBalance_TQ=thankYouPage.getAvailableBalanceValue();
		thankYouPage.checkAvailableBalance(AvailBalance_TQ,availBal,amount);
		softAssert.assertTrue(thankYouPage.verifyPaymentDetailsLabelDisplayed(),"Payment Details label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyRecipientreferenceLabelDisplayed(),"Recipient Reference label on Thank you page is not displayed");
		String recipientRefernce_TQ=thankYouPage.getRecipientReferenceValue();
		verifyText(recipientRefernce_TQ,recieptReference);
		String paymentDetails_TQ=thankYouPage.getPaymentDetailsValue();
		verifyText(paymentDetails_TQ,paymentDetails);
		transferDashboardPage=thankYouPage.clickTransferDoneButton();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		dashboardPage=transferDashboardPage.clickBackbutton();
		dashboardPage.verifyBankingDashboardisplayed();
		changeToChecker();
		ApproveFirstRecord();
		softAssert.assertAll();
		
	}
	
	@Test(groups = {"RegressionTest"})
	public void tc002_Future_OwnAccount_Transfer() throws Throwable {
		
		SoftAssert softAssert=new SoftAssert();
		changeToMaker();
		transferDashboardPage=dashboardPage.clickTransferIcon();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		transferFromPage=transferDashboardPage.clickOwnAccountTransferLoanTransferIcon();
		Assert.assertTrue(transferFromPage.verifyTransferFromPageDisplayed());
		String fromAccName=transferFromPage.getAccountName();
		String fromAccNumber=transferFromPage.getAccountNumber();
		String availBal=transferFromPage.getAmount();
		transferToPage=transferFromPage.clickTransferFromAccount();
		Assert.assertTrue(transferToPage.verifyTransferToPageDisplayed());
		String toAccName=transferToPage.getAccountName();
		String toAccNumber=transferToPage.getAccountNumber();
		String availBal_toAcc=transferToPage.getAmount();
		enterAmountPage=transferToPage.clickTransferToAccount();
		Assert.assertTrue(enterAmountPage.verifyEnterAmountPageDisplayed());
		String amount=randomString("numeric",2);
		transferDetailsPage=enterAmountPage.enterTransferAmount(amount);
		Assert.assertTrue(transferDetailsPage.verifyOwnAccountTransferDetailsPageDisplayed());
		String fromAccName_TD=transferDetailsPage.getTransferFromAccName();
		String fromAccNumber_TD=transferDetailsPage.getTransferFromAccNumber();
		softAssert.assertEquals(fromAccName_TD, fromAccName,"From Account Name on transfer details page is not matching");
		softAssert.assertEquals(fromAccNumber_TD, fromAccNumber,"From Account Number on transfer details page is not matching");
		String toAccName_TD=transferDetailsPage.getTransferToAccName();
		String toAccNumber_TD=transferDetailsPage.getTransferToAccNumber();
		softAssert.assertEquals(toAccName_TD, toAccName,"To Account Name on transfer details page is not matching");
		softAssert.assertEquals(toAccNumber_TD, toAccNumber,"To Account Number on transfer details page is not matching");
		String amount_TD=transferDetailsPage.getAmount();
		softAssert.assertEquals(amount_TD, amount.concat(".00"),"Amount on transfer details page is not matching");
		calenderPage=transferDetailsPage.clickCalender();
		transferDetailsPage=calenderPage.clickFutureTransferDate();
		String date=transferDetailsPage.getDate();
		String recieptReference=randomString("alphabetic",7);
		String paymentDetails=randomString("alphabetic",8);
		transferDetailsPage.enterReceiptRefrencePaymentDetails(recieptReference,paymentDetails);
		//transferDetailsPage.enterPaymentDetails(paymentDetails);
		reviewDetailsPage=transferDetailsPage.clickContinueButton();
		Assert.assertTrue(reviewDetailsPage.verifyReviewDetailsPageDisplayed());
		String transferToHeader=reviewDetailsPage.getTransferToLabel();
		verifyText(transferToHeader,"Transfer To");
		verifyText(reviewDetailsPage.getTransferToAccountName(),toAccName);
		softAssert.assertTrue(reviewDetailsPage.verifyScheduledForLabelDisplayed(), "Scheduled For label on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyToAccountNumberLabelDisplayed(), "To Account number on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNameLabelDisplayed(), "From Account Name on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNumberLabelDisplayed(), "From Account Number on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyReciepientRefrenceLabelDisplayed(), "Recipient Reference on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyPaymentDetailsLabelDisplayed(), "Payment Details on review details is not displayed");
		String amountRD=reviewDetailsPage.getAmount();
		verifyText(amount.concat(".00"),amountRD);
		verifyText(reviewDetailsPage.getScheduledForDate(),date);
		verifyText(reviewDetailsPage.getToAccountNumber(),toAccNumber);
		verifyText(reviewDetailsPage.getFromAccountNameAccountName(),fromAccName);
		verifyText(reviewDetailsPage.getFromAccountNameAccountNumber(),fromAccNumber);
		verifyText(reviewDetailsPage.getRecipientReferenceValue(),recieptReference);
		verifyText(reviewDetailsPage.getPaymentDetailsValue(),paymentDetails);
		thankYouPage=reviewDetailsPage.clickContinueButton();
		Assert.assertTrue(thankYouPage.verifyThankYouPageDisplayed());
		verifyText(thankYouPage.getThankYouPageHeader(),"Transaction Scheduled");
		verifyTextContains(thankYouPage.getThankYouPageHeaderDate(),"Own Account Transfer");
		verifyTextContains(amount.concat(".00"),thankYouPage.getAmountValue());
		verifyText(thankYouPage.getScheduledForDate(),date);
		thankYouPage.getRefrenceIDValue();
		verifyText(thankYouPage.getStatusValue(),"Approved Transfer Scheduled");
		softAssert.assertTrue(thankYouPage.verifyTransferToLabelDisplayed(),"Transfer To label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyFromAccountLabelDisplayed(),"From Account label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyPaymentDetailsLabelDisplayed(),"Payment Details label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyRecipientreferenceLabelDisplayed(),"Recipient Reference label on Thank you page is not displayed");
		String recipientRefernce_TQ=thankYouPage.getRecipientReferenceValue();
		verifyText(recipientRefernce_TQ,recieptReference);
		String paymentDetails_TQ=thankYouPage.getPaymentDetailsValue();
		verifyText(paymentDetails_TQ,paymentDetails);
		transferDashboardPage=thankYouPage.clickTransferDoneButton();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		dashboardPage=transferDashboardPage.clickBackbutton();
		dashboardPage.verifyBankingDashboardisplayed();
		changeToChecker();
		ApproveFirstRecord();
		softAssert.assertAll();
		
	}
	
	@Test(groups = {"RegressionTest"})
	public void tc003_Immediate_ThirdParty_Transfer() throws Throwable {
		
		SoftAssert softAssert=new SoftAssert();
		changeToMaker();
		transferDashboardPage=dashboardPage.clickTransferIcon();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		transferFromPage=transferDashboardPage.clickOthersAccountTransferIcon();
		Assert.assertTrue(transferFromPage.verifyTransferFromPageDisplayed());
		String fromAccName=transferFromPage.getAccountName();
		String fromAccNumber=transferFromPage.getAccountNumber();
		String availBal=transferFromPage.getAmount();
		bankListPage=transferFromPage.clickTransferFromAccountThirdPartyTrasfer();
		Assert.assertTrue(bankListPage.verifySelectRecipientBankNamePageDisplayed());
		String bankName="Maybank";
		bankListPage.enterSearchBankName(bankName);
		bankListPage.clickFirstBiller();
		String BankName=bankListPage.getRecipientBankName();
		String toAccNumber=loginUsers.getJSONObject("ThirdPartyTransfer").getString("AccountNumber");
		bankListPage.enterAccountNumber(toAccNumber);
		enterAmountPage=bankListPage.clickNextButton();
		Assert.assertTrue(enterAmountPage.verifyEnterAmountPageDisplayed());
		String amount=randomString("numeric",2);
		transferDetailsPage=enterAmountPage.enterTransferAmount(amount);
		Assert.assertTrue(transferDetailsPage.verifyOtherAccountsTransferDetailsPageDisplayed());
	//	String fromAccName_TD=transferDetailsPage.getTransferFromAccName();
	//	String fromAccNumber_TD=transferDetailsPage.getTransferFromAccNumber();
	//	softAssert.assertEquals(fromAccName_TD, fromAccName,"From Account Name on transfer details page is not matching");
	//	softAssert.assertEquals(fromAccNumber_TD, fromAccNumber,"From Account Number on transfer details page is not matching");
		String toAccName_TD=transferDetailsPage.getTransferToAccName();
	//  String toAccNumber_TD=transferDetailsPage.getTransferToAccNumber();
	//	softAssert.assertEquals(toAccName_TD, toAccName,"To Account Name on transfer details page is not matching");
	//	softAssert.assertEquals(toAccNumber_TD, toAccNumber,"To Account Number on transfer details page is not matching");
		String amount_TD=transferDetailsPage.getAmount();
		softAssert.assertEquals(amount_TD, amount.concat(".00"),"Amount on transfer details page is not matching");
		String recieptReference=randomString("alphabetic",7);
		String paymentDetails=randomString("alphabetic",8);
		transferDetailsPage.enterReceiptRefrencePaymentDetails(recieptReference,paymentDetails);
		//transferDetailsPage.enterPaymentDetails(paymentDetails);
		transferDetailsPage.clickAddFavTogglebtn();
		reviewDetailsPage=transferDetailsPage.clickContinueButton();
		Assert.assertTrue(reviewDetailsPage.verifyReviewDetailsPageDisplayed());
		String transferToHeader=reviewDetailsPage.getTransferToLabel();
		verifyText(transferToHeader,"Transfer To");
		verifyText(reviewDetailsPage.getTransferToAccountName(),toAccName_TD);
	//	softAssert.assertTrue(reviewDetailsPage.verifyScheduledForLabelDisplayed(), "Scheduled For label on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyToAccountNumberLabelDisplayed(), "To Account number on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyRecipientBankLabelDisplayed(), "Recipient Bank Label on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNameLabelDisplayed(), "From Account Name on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNumberLabelDisplayed(), "From Account Number on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyReciepientRefrenceLabelDisplayed(), "Recipient Reference on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyPaymentDetailsLabelDisplayed(), "Payment Details on review details is not displayed");
		String amountRD=reviewDetailsPage.getAmount();
		verifyText(amount.concat(".00"),amountRD);
		verifyText(reviewDetailsPage.getToAccountNumber(),toAccNumber);
		verifyText(reviewDetailsPage.getRecipientBankValue(),BankName);
		verifyText(reviewDetailsPage.getFromAccountNameAccountName(),fromAccName);
		verifyText(reviewDetailsPage.getFromAccountNameAccountNumber(),fromAccNumber);
		verifyText(reviewDetailsPage.getRecipientReferenceValue(),recieptReference);
		verifyText(reviewDetailsPage.getPaymentDetailsValue(),paymentDetails);
		otpPage=reviewDetailsPage.clickContinueButton_FraudMakerFlow();
		otpPage.clickConfirm_btn();
		thankYouPage=otpPage.enterOTP_Transfers();
		Assert.assertTrue(thankYouPage.verifyThankYouPageDisplayed());
		verifyText(thankYouPage.getThankYouPageHeader(),"Sent For Approval");
		verifyTextContains(thankYouPage.getThankYouPageHeaderDate(),"Third Party Transfer");
		verifyTextContains(amount.concat(".00"),thankYouPage.getAmountValue());
		thankYouPage.getRefrenceIDValue();
		verifyText(thankYouPage.getStatusValue(),"Pending");
		softAssert.assertTrue(thankYouPage.verifyTransferToLabelDisplayed(),"Transfer To label on Thank you page is not displayed");
		verifyText(thankYouPage.getRecipientBank(),bankName);
		softAssert.assertTrue(thankYouPage.verifyFromAccountLabelDisplayed(),"From Account label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyPaymentDetailsLabelDisplayed(),"Payment Details label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyRecipientreferenceLabelDisplayed(),"Recipient Reference label on Thank you page is not displayed");
		String recipientRefernce_TQ=thankYouPage.getRecipientReferenceValue();
		verifyText(recipientRefernce_TQ,recieptReference);
		String paymentDetails_TQ=thankYouPage.getPaymentDetailsValue();
		verifyText(paymentDetails_TQ,paymentDetails);
		transferDashboardPage=thankYouPage.clickTransferDoneButton();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		dashboardPage=transferDashboardPage.clickBackbutton();
		dashboardPage.verifyBankingDashboardisplayed();
		changeToChecker();
		ApproveFirstRecord();
		softAssert.assertAll();
		
	}

	
	@Test(groups = { "SmokeTest","RegressionTest" })
	public void tc004_Future_ThirdParty_Transfer() throws Throwable {
		
		SoftAssert softAssert=new SoftAssert();
		changeToMaker();
		transferDashboardPage=dashboardPage.clickTransferIcon();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		transferFromPage=transferDashboardPage.clickOthersAccountTransferIcon();
		Assert.assertTrue(transferFromPage.verifyTransferFromPageDisplayed());
		String fromAccName=transferFromPage.getAccountName();
		String fromAccNumber=transferFromPage.getAccountNumber();
		String availBal=transferFromPage.getAmount();
		bankListPage=transferFromPage.clickTransferFromAccountThirdPartyTrasfer();
		Assert.assertTrue(bankListPage.verifySelectRecipientBankNamePageDisplayed());
		String bankName="Maybank";
		bankListPage.enterSearchBankName(bankName);
		bankListPage.clickFirstBiller();
		String BankName=bankListPage.getRecipientBankName();
		String toAccNumber=loginUsers.getJSONObject("ThirdPartyTransfer").getString("AccountNumber");
		bankListPage.enterAccountNumber(toAccNumber);
		enterAmountPage=bankListPage.clickNextButton();
		Assert.assertTrue(enterAmountPage.verifyEnterAmountPageDisplayed());
		String amount=randomString("numeric",2);
		transferDetailsPage=enterAmountPage.enterTransferAmount(amount);
		Assert.assertTrue(transferDetailsPage.verifyOtherAccountsTransferDetailsPageDisplayed());
	//	String fromAccName_TD=transferDetailsPage.getTransferFromAccName();
	//	String fromAccNumber_TD=transferDetailsPage.getTransferFromAccNumber();
	//	softAssert.assertEquals(fromAccName_TD, fromAccName,"From Account Name on transfer details page is not matching");
	//	softAssert.assertEquals(fromAccNumber_TD, fromAccNumber,"From Account Number on transfer details page is not matching");
		String toAccName_TD=transferDetailsPage.getTransferToAccName();
	//  String toAccNumber_TD=transferDetailsPage.getTransferToAccNumber();
	//	softAssert.assertEquals(toAccName_TD, toAccName,"To Account Name on transfer details page is not matching");
	//	softAssert.assertEquals(toAccNumber_TD, toAccNumber,"To Account Number on transfer details page is not matching");
		String amount_TD=transferDetailsPage.getAmount();
		softAssert.assertEquals(amount_TD, amount.concat(".00"),"Amount on transfer details page is not matching");
		calenderPage=transferDetailsPage.clickCalender();
		transferDetailsPage=calenderPage.clickFutureTransferDate();
		String date=transferDetailsPage.getDate();
		String recieptReference=randomString("alphabetic",7);
		String paymentDetails=randomString("alphabetic",8);
		transferDetailsPage.enterReceiptRefrencePaymentDetails(recieptReference,paymentDetails);
		//transferDetailsPage.enterPaymentDetails(paymentDetails);
		transferDetailsPage.clickAddFavTogglebtn();
		reviewDetailsPage=transferDetailsPage.clickContinueButton();
		Assert.assertTrue(reviewDetailsPage.verifyReviewDetailsPageDisplayed());
		String transferToHeader=reviewDetailsPage.getTransferToLabel();
		verifyText(transferToHeader,"Transfer To");
		verifyText(reviewDetailsPage.getTransferToAccountName(),toAccName_TD);
		softAssert.assertTrue(reviewDetailsPage.verifyScheduledForLabelDisplayed(), "Scheduled For label on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyToAccountNumberLabelDisplayed(), "To Account number on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyRecipientBankLabelDisplayed(), "Recipient Bank Label on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNameLabelDisplayed(), "From Account Name on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNumberLabelDisplayed(), "From Account Number on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyReciepientRefrenceLabelDisplayed(), "Recipient Reference on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyPaymentDetailsLabelDisplayed(), "Payment Details on review details is not displayed");
		String amountRD=reviewDetailsPage.getAmount();
		verifyText(amount.concat(".00"),amountRD);
		verifyText(reviewDetailsPage.getScheduledForDate(),date);
		verifyText(reviewDetailsPage.getToAccountNumber(),toAccNumber);
		verifyText(reviewDetailsPage.getRecipientBankValue(),BankName);
		verifyText(reviewDetailsPage.getFromAccountNameAccountName(),fromAccName);
		verifyText(reviewDetailsPage.getFromAccountNameAccountNumber(),fromAccNumber);
		verifyText(reviewDetailsPage.getRecipientReferenceValue(),recieptReference);
		verifyText(reviewDetailsPage.getPaymentDetailsValue(),paymentDetails);
		otpPage=reviewDetailsPage.clickContinueButton_FraudMakerFlow();
		otpPage.clickConfirm_btn();
		thankYouPage=otpPage.enterOTP_Transfers();
		Assert.assertTrue(thankYouPage.verifyThankYouPageDisplayed());
		verifyText(thankYouPage.getThankYouPageHeader(),"Sent For Approval");
		verifyTextContains(thankYouPage.getThankYouPageHeaderDate(),"Third Party Transfer");
		verifyTextContains(amount.concat(".00"),thankYouPage.getAmountValue());
		verifyText(thankYouPage.getScheduledForDate(),date);
		thankYouPage.getRefrenceIDValue();
		verifyText(thankYouPage.getStatusValue(),"Pending");
		softAssert.assertTrue(thankYouPage.verifyTransferToLabelDisplayed(),"Transfer To label on Thank you page is not displayed");
		verifyText(thankYouPage.getRecipientBank(),bankName);
		softAssert.assertTrue(thankYouPage.verifyFromAccountLabelDisplayed(),"From Account label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyPaymentDetailsLabelDisplayed(),"Payment Details label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyRecipientreferenceLabelDisplayed(),"Recipient Reference label on Thank you page is not displayed");
		String recipientRefernce_TQ=thankYouPage.getRecipientReferenceValue();
		verifyText(recipientRefernce_TQ,recieptReference);
		String paymentDetails_TQ=thankYouPage.getPaymentDetailsValue();
		verifyText(paymentDetails_TQ,paymentDetails);
		transferDashboardPage=thankYouPage.clickTransferDoneButton();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		dashboardPage=transferDashboardPage.clickBackbutton();
		dashboardPage.verifyBankingDashboardisplayed();
		changeToChecker();
		ApproveFirstRecord();
		softAssert.assertAll();

	}

	@Test(groups = {"RegressionTest"})
	public void tc005_Recurring_ThirdParty_Transfer() throws Throwable {
		
		SoftAssert softAssert=new SoftAssert();
		changeToMaker();
		transferDashboardPage=dashboardPage.clickTransferIcon();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		transferFromPage=transferDashboardPage.clickOthersAccountTransferIcon();
		Assert.assertTrue(transferFromPage.verifyTransferFromPageDisplayed());
		String fromAccName=transferFromPage.getAccountName();
		String fromAccNumber=transferFromPage.getAccountNumber();
		String availBal=transferFromPage.getAmount();
		bankListPage=transferFromPage.clickTransferFromAccountThirdPartyTrasfer();
		Assert.assertTrue(bankListPage.verifySelectRecipientBankNamePageDisplayed());
		String bankName="Maybank";
		bankListPage.enterSearchBankName(bankName);
		bankListPage.clickFirstBiller();
		String BankName=bankListPage.getRecipientBankName();
		String toAccNumber=loginUsers.getJSONObject("ThirdPartyTransfer").getString("AccountNumber");
		bankListPage.enterAccountNumber(toAccNumber);
		enterAmountPage=bankListPage.clickNextButton();
		Assert.assertTrue(enterAmountPage.verifyEnterAmountPageDisplayed());
		String amount=randomString("numeric",2);
		transferDetailsPage=enterAmountPage.enterTransferAmount(amount);
		Assert.assertTrue(transferDetailsPage.verifyOtherAccountsTransferDetailsPageDisplayed());
	//	String fromAccName_TD=transferDetailsPage.getTransferFromAccName();
	//	String fromAccNumber_TD=transferDetailsPage.getTransferFromAccNumber();
	//	softAssert.assertEquals(fromAccName_TD, fromAccName,"From Account Name on transfer details page is not matching");
	//	softAssert.assertEquals(fromAccNumber_TD, fromAccNumber,"From Account Number on transfer details page is not matching");
		String toAccName_TD=transferDetailsPage.getTransferToAccName();
	//  String toAccNumber_TD=transferDetailsPage.getTransferToAccNumber();
	//	softAssert.assertEquals(toAccName_TD, toAccName,"To Account Name on transfer details page is not matching");
	//	softAssert.assertEquals(toAccNumber_TD, toAccNumber,"To Account Number on transfer details page is not matching");
		String amount_TD=transferDetailsPage.getAmount();
		softAssert.assertEquals(amount_TD, amount.concat(".00"),"Amount on transfer details page is not matching");
		String recieptReference=randomString("alphabetic",7);
		String paymentDetails=randomString("alphabetic",8);
		transferDetailsPage.enterReceiptRefrencePaymentDetails(recieptReference,paymentDetails);
		//transferDetailsPage.enterPaymentDetails(paymentDetails);
		transferDetailsPage.clickSetRecurringRdb();
		transferDetailsPage.clickAddFavTogglebtn();
		reviewDetailsPage=transferDetailsPage.clickContinueButton();
		Assert.assertTrue(reviewDetailsPage.verifyReviewDetailsPageDisplayed());
		String transferToHeader=reviewDetailsPage.getTransferToLabel();
		verifyText(transferToHeader,"Transfer To");
		verifyText(reviewDetailsPage.getTransferToAccountName(),toAccName_TD);
		softAssert.assertTrue(reviewDetailsPage.verifyStartDateLabelDisplayed(), "Start Date label on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyEndDateLabelDisplayed(), "End Date label on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyToAccountNumberLabelDisplayed(), "To Account number on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyRecipientBankLabelDisplayed(), "Recipient Bank Label on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNameLabelDisplayed(), "From Account Name on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNumberLabelDisplayed(), "From Account Number on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyReciepientRefrenceLabelDisplayed(), "Recipient Reference on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyPaymentDetailsLabelDisplayed(), "Payment Details on review details is not displayed");
		String amountRD=reviewDetailsPage.getAmount();
		verifyText(amount.concat(".00"),amountRD);
		String startDate=reviewDetailsPage.getStartDate();
		String endDate=reviewDetailsPage.getEndDate();
		verifyText(reviewDetailsPage.getToAccountNumber(),toAccNumber);
		verifyText(reviewDetailsPage.getRecipientBankValue(),BankName);
		verifyText(reviewDetailsPage.getFromAccountNameAccountName(),fromAccName);
		verifyText(reviewDetailsPage.getFromAccountNameAccountNumber(),fromAccNumber);
		verifyText(reviewDetailsPage.getRecipientReferenceValue(),recieptReference);
		verifyText(reviewDetailsPage.getPaymentDetailsValue(),paymentDetails);
		otpPage=reviewDetailsPage.clickContinueButton_FraudMakerFlow();
		otpPage.clickConfirm_btn();
		thankYouPage=otpPage.enterOTP_Transfers();
		Assert.assertTrue(thankYouPage.verifyThankYouPageDisplayed());
		verifyText(thankYouPage.getThankYouPageHeader(),"Sent For Approval");
		verifyTextContains(thankYouPage.getThankYouPageHeaderDate(),"Recurring Transfer");
		verifyTextContains(amount.concat(".00"),thankYouPage.getAmountValue());
		verifyText(thankYouPage.getStartDate(),startDate);
		verifyText(thankYouPage.getEndDate(),endDate);
		thankYouPage.getRefrenceIDValue();
		verifyText(thankYouPage.getStatusValue(),"Pending");
		softAssert.assertTrue(thankYouPage.verifyTransferToLabelDisplayed(),"Transfer To label on Thank you page is not displayed");
		verifyText(thankYouPage.getRecipientBank(),bankName);
		softAssert.assertTrue(thankYouPage.verifyFromAccountLabelDisplayed(),"From Account label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyPaymentDetailsLabelDisplayed(),"Payment Details label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyRecipientreferenceLabelDisplayed(),"Recipient Reference label on Thank you page is not displayed");
		String recipientRefernce_TQ=thankYouPage.getRecipientReferenceValue();
		verifyText(recipientRefernce_TQ,recieptReference);
		String paymentDetails_TQ=thankYouPage.getPaymentDetailsValue();
		verifyText(paymentDetails_TQ,paymentDetails);
		transferDashboardPage=thankYouPage.clickTransferDoneButton();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		dashboardPage=transferDashboardPage.clickBackbutton();
		dashboardPage.verifyBankingDashboardisplayed();
		changeToChecker();
		ApproveFirstRecord();
		softAssert.assertAll();
		
	}	

@Test(groups = { "SmokeTest","RegressionTest","Demo" })	
public void tc006_Immediate_GIRO_Transfer() throws Throwable {
		
		SoftAssert softAssert=new SoftAssert();
		changeToMaker();
		transferDashboardPage=dashboardPage.clickTransferIcon();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		transferFromPage=transferDashboardPage.clickOthersAccountTransferIcon();
		Assert.assertTrue(transferFromPage.verifyTransferFromPageDisplayed());
		String fromAccName=transferFromPage.getAccountName();
		String fromAccNumber=transferFromPage.getAccountNumber();
		String availBal=transferFromPage.getAmount();
		bankListPage=transferFromPage.clickTransferFromAccountThirdPartyTrasfer();
		Assert.assertTrue(bankListPage.verifySelectRecipientBankNamePageDisplayed());
		bankListPage.enterSearchBankName(loginUsers.getJSONObject("GIROImmediateTransfer").getString("BankName"));
		bankListPage.clickFirstBiller();
		String BankName=bankListPage.getRecipientBankName();
		String toAccNumber=loginUsers.getJSONObject("GIROImmediateTransfer").getString("AccountNumber");
		bankListPage.enterAccountNumber(toAccNumber);
		String toAccName=loginUsers.getJSONObject("GIROImmediateTransfer").getString("AccountName");
		bankListPage.enterRecipientName(toAccName);
		enterAmountPage=bankListPage.clickNextButton();
		Assert.assertTrue(enterAmountPage.verifyEnterAmountPageDisplayed());
		String amount=randomString("numeric",2);
		transferDetailsPage=enterAmountPage.enterTransferAmount(amount);
		Assert.assertTrue(transferDetailsPage.verifyOtherAccountsTransferDetailsPageDisplayed());
	//	String fromAccName_TD=transferDetailsPage.getTransferFromAccName();
	//	String fromAccNumber_TD=transferDetailsPage.getTransferFromAccNumber();
	//	softAssert.assertEquals(fromAccName_TD, fromAccName,"From Account Name on transfer details page is not matching");
	//	softAssert.assertEquals(fromAccNumber_TD, fromAccNumber,"From Account Number on transfer details page is not matching");
		String toAccName_TD=transferDetailsPage.getTransferToAccName();
	//  String toAccNumber_TD=transferDetailsPage.getTransferToAccNumber();
	//	softAssert.assertEquals(toAccName_TD, toAccName,"To Account Name on transfer details page is not matching");
	//	softAssert.assertEquals(toAccNumber_TD, toAccNumber,"To Account Number on transfer details page is not matching");

		String amount_TD=transferDetailsPage.getAmount();
		softAssert.assertEquals(amount_TD, amount.concat(".00"),"Amount on transfer details page is not matching");
		transferDetailsPage.clickTransferType();
		transferDetailsPage.selectFundTransfer();
		transferDetailsPage.clickTransferMode();
		transferDetailsPage.selectGIRO();
		String recieptReference=randomString("alphabetic",7);
		String paymentDetails=randomString("alphabetic",8);
		transferDetailsPage.enterReceiptRefrencePaymentDetails(recieptReference,paymentDetails);
		//transferDetailsPage.enterPaymentDetails(paymentDetails);
		transferDetailsPage.clickAddFavTogglebtn();
		reviewDetailsPage=transferDetailsPage.clickContinueButton();
		Assert.assertTrue(reviewDetailsPage.verifyReviewDetailsPageDisplayed());
		String transferToHeader=reviewDetailsPage.getTransferToLabel();
		verifyText(transferToHeader,"Transfer To");
		verifyText(reviewDetailsPage.getTransferToAccountName(),toAccName_TD);
	//	softAssert.assertTrue(reviewDetailsPage.verifyScheduledForLabelDisplayed(), "Scheduled For label on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyToAccountNumberLabelDisplayed(), "To Account number on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyRecipientBankLabelDisplayed(), "Recipient Bank Label on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNameLabelDisplayed(), "From Account Name on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNumberLabelDisplayed(), "From Account Number on review details is not displayed");
		//softAssert.assertTrue(reviewDetailsPage.verifyReciepientRefrenceLabelDisplayed(), "Recipient Reference on review details is not displayed");
		//softAssert.assertTrue(reviewDetailsPage.verifyPaymentDetailsLabelDisplayed(), "Payment Details on review details is not displayed");
		String amountRD=reviewDetailsPage.getAmount();
		verifyText(amount.concat(".00"),amountRD);
		verifyText(reviewDetailsPage.getToAccountNumber(),toAccNumber);
		verifyText(reviewDetailsPage.getRecipientBankValue(),BankName);
		verifyText(reviewDetailsPage.getFromAccountNameAccountName(),fromAccName);
		verifyText(reviewDetailsPage.getFromAccountNameAccountNumber(),fromAccNumber);
		//verifyText(reviewDetailsPage.getRecipientReferenceValue(),recieptReference);
		//verifyText(reviewDetailsPage.getPaymentDetailsValue(),paymentDetails);
		otpPage=reviewDetailsPage.clickContinueButton_FraudMakerFlow();
		otpPage.clickConfirm_btn();
		thankYouPage=otpPage.enterOTP_Transfers();
		Assert.assertTrue(thankYouPage.verifyThankYouPageDisplayed());
		verifyText(thankYouPage.getThankYouPageHeader(),"Sent For Approval");
		verifyTextContains(thankYouPage.getThankYouPageHeaderDate(),"GIRO/Instant Transfer");
		verifyTextContains(amount.concat(".00"),thankYouPage.getAmountValue());
		thankYouPage.getRefrenceIDValue();
		verifyText(thankYouPage.getStatusValue(),"Pending");
		softAssert.assertTrue(thankYouPage.verifyTransferToLabelDisplayed(),"Transfer To label on Thank you page is not displayed");
		verifyText(thankYouPage.getRecipientBank(),BankName);
		verifyText(thankYouPage.getTransferTypeValue(),"Funds Transfer");
		verifyText(thankYouPage.getTransferModeValue(),"GIRO");
		softAssert.assertTrue(thankYouPage.verifyFromAccountLabelDisplayed(),"From Account label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyPaymentDetailsLabelDisplayed(),"Payment Details label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyRecipientreferenceLabelDisplayed(),"Recipient Reference label on Thank you page is not displayed");
		String recipientRefernce_TQ=thankYouPage.getRecipientReferenceValue();
		verifyText(recipientRefernce_TQ,recieptReference);
		String paymentDetails_TQ=thankYouPage.getPaymentDetailsValue();
		verifyText(paymentDetails_TQ,paymentDetails);
		transferDashboardPage=thankYouPage.clickTransferDoneButton();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		dashboardPage=transferDashboardPage.clickBackbutton();
		dashboardPage.verifyBankingDashboardisplayed();
		changeToChecker();
		ApproveFirstRecord();
		softAssert.assertAll();
		
	}

@Test(groups = {"RegressionTest"})
public void tc007_Future_GIRO_Transfer() throws Throwable {
	
	SoftAssert softAssert=new SoftAssert();
	changeToMaker();
	transferDashboardPage=dashboardPage.clickTransferIcon();
	Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
	transferFromPage=transferDashboardPage.clickOthersAccountTransferIcon();
	Assert.assertTrue(transferFromPage.verifyTransferFromPageDisplayed());
	String fromAccName=transferFromPage.getAccountName();
	String fromAccNumber=transferFromPage.getAccountNumber();
	String availBal=transferFromPage.getAmount();
	bankListPage=transferFromPage.clickTransferFromAccountThirdPartyTrasfer();
	Assert.assertTrue(bankListPage.verifySelectRecipientBankNamePageDisplayed());
	bankListPage.enterSearchBankName(loginUsers.getJSONObject("GIROFutureTransfer").getString("BankName"));
	bankListPage.clickFirstBiller();
	String BankName=bankListPage.getRecipientBankName();
	String toAccNumber=loginUsers.getJSONObject("GIROFutureTransfer").getString("AccountNumber");
	bankListPage.enterAccountNumber(toAccNumber);
	String toAccName=loginUsers.getJSONObject("GIROFutureTransfer").getString("AccountName");
	bankListPage.enterRecipientName(toAccName);
	enterAmountPage=bankListPage.clickNextButton();
	Assert.assertTrue(enterAmountPage.verifyEnterAmountPageDisplayed());
	String amount=randomString("numeric",2);
	transferDetailsPage=enterAmountPage.enterTransferAmount(amount);
	Assert.assertTrue(transferDetailsPage.verifyOtherAccountsTransferDetailsPageDisplayed());
//	String fromAccName_TD=transferDetailsPage.getTransferFromAccName();
//	String fromAccNumber_TD=transferDetailsPage.getTransferFromAccNumber();
//	softAssert.assertEquals(fromAccName_TD, fromAccName,"From Account Name on transfer details page is not matching");
//	softAssert.assertEquals(fromAccNumber_TD, fromAccNumber,"From Account Number on transfer details page is not matching");
	String toAccName_TD=transferDetailsPage.getTransferToAccName();
//  String toAccNumber_TD=transferDetailsPage.getTransferToAccNumber();
//	softAssert.assertEquals(toAccName_TD, toAccName,"To Account Name on transfer details page is not matching");
//	softAssert.assertEquals(toAccNumber_TD, toAccNumber,"To Account Number on transfer details page is not matching");
	String amount_TD=transferDetailsPage.getAmount();
	softAssert.assertEquals(amount_TD, amount.concat(".00"),"Amount on transfer details page is not matching");
	transferDetailsPage.clickTransferType();
	transferDetailsPage.selectFundTransfer();
	transferDetailsPage.clickTransferMode();
	transferDetailsPage.selectGIRO();
	calenderPage=transferDetailsPage.clickCalender();
	transferDetailsPage=calenderPage.clickFutureTransferDate();
	String date=transferDetailsPage.getDate();
	String recieptReference=randomString("alphabetic",7);
	String paymentDetails=randomString("alphabetic",8);
	transferDetailsPage.enterReceiptRefrencePaymentDetails(recieptReference,paymentDetails);
	//transferDetailsPage.enterPaymentDetails(paymentDetails);
	transferDetailsPage.clickAddFavTogglebtn();
	reviewDetailsPage=transferDetailsPage.clickContinueButton();
	Assert.assertTrue(reviewDetailsPage.verifyReviewDetailsPageDisplayed());
	String transferToHeader=reviewDetailsPage.getTransferToLabel();
	verifyText(transferToHeader,"Transfer To");
	verifyText(reviewDetailsPage.getTransferToAccountName(),toAccName_TD);
	softAssert.assertTrue(reviewDetailsPage.verifyScheduledForLabelDisplayed(), "Scheduled For label on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyToAccountNumberLabelDisplayed(), "To Account number on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyRecipientBankLabelDisplayed(), "Recipient Bank Label on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNameLabelDisplayed(), "From Account Name on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNumberLabelDisplayed(), "From Account Number on review details is not displayed");
	//softAssert.assertTrue(reviewDetailsPage.verifyReciepientRefrenceLabelDisplayed(), "Recipient Reference on review details is not displayed");
	//softAssert.assertTrue(reviewDetailsPage.verifyPaymentDetailsLabelDisplayed(), "Payment Details on review details is not displayed");
	String amountRD=reviewDetailsPage.getAmount();
	verifyText(amount.concat(".00"),amountRD);
	verifyText(reviewDetailsPage.getScheduledForDate(),date);
	verifyText(reviewDetailsPage.getToAccountNumber(),toAccNumber);
	verifyText(reviewDetailsPage.getRecipientBankValue(),BankName);
	verifyText(reviewDetailsPage.getFromAccountNameAccountName(),fromAccName);
	verifyText(reviewDetailsPage.getFromAccountNameAccountNumber(),fromAccNumber);
	//verifyText(reviewDetailsPage.getRecipientReferenceValue(),recieptReference);
	//verifyText(reviewDetailsPage.getPaymentDetailsValue(),paymentDetails);
	otpPage=reviewDetailsPage.clickContinueButton_FraudMakerFlow();
		otpPage.clickConfirm_btn();
		thankYouPage=otpPage.enterOTP_Transfers();
		Assert.assertTrue(thankYouPage.verifyThankYouPageDisplayed());
		verifyText(thankYouPage.getThankYouPageHeader(),"Sent For Approval");
		verifyTextContains(thankYouPage.getThankYouPageHeaderDate(),"GIRO/Instant Transfer");
		verifyTextContains(amount.concat(".00"),thankYouPage.getAmountValue());
		verifyText(thankYouPage.getScheduledForDate(),date);
		thankYouPage.getRefrenceIDValue();
		verifyText(thankYouPage.getStatusValue(),"Pending");
		softAssert.assertTrue(thankYouPage.verifyTransferToLabelDisplayed(),"Transfer To label on Thank you page is not displayed");
		verifyText(thankYouPage.getRecipientBank(),BankName);
		verifyText(thankYouPage.getTransferTypeValue(),"Funds Transfer");
		verifyText(thankYouPage.getTransferModeValue(),"GIRO");
		softAssert.assertTrue(thankYouPage.verifyFromAccountLabelDisplayed(),"From Account label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyPaymentDetailsLabelDisplayed(),"Payment Details label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyRecipientreferenceLabelDisplayed(),"Recipient Reference label on Thank you page is not displayed");
		String recipientRefernce_TQ=thankYouPage.getRecipientReferenceValue();
		verifyText(recipientRefernce_TQ,recieptReference);
		String paymentDetails_TQ=thankYouPage.getPaymentDetailsValue();
		verifyText(paymentDetails_TQ,paymentDetails);
		transferDashboardPage=thankYouPage.clickTransferDoneButton();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		dashboardPage=transferDashboardPage.clickBackbutton();
		dashboardPage.verifyBankingDashboardisplayed();
		changeToChecker();
		ApproveFirstRecord();
		softAssert.assertAll();
	
}

@Test(groups = {"RegressionTest"})
public void tc008_Recurring_GIRO_Transfer() throws Throwable {
	
	SoftAssert softAssert=new SoftAssert();
	changeToMaker();
	transferDashboardPage=dashboardPage.clickTransferIcon();
	Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
	transferFromPage=transferDashboardPage.clickOthersAccountTransferIcon();
	Assert.assertTrue(transferFromPage.verifyTransferFromPageDisplayed());
	String fromAccName=transferFromPage.getAccountName();
	String fromAccNumber=transferFromPage.getAccountNumber();
	String availBal=transferFromPage.getAmount();
	bankListPage=transferFromPage.clickTransferFromAccountThirdPartyTrasfer();
	Assert.assertTrue(bankListPage.verifySelectRecipientBankNamePageDisplayed());
	bankListPage.enterSearchBankName(loginUsers.getJSONObject("GIRORecurringTransfer").getString("BankName"));
	bankListPage.clickFirstBiller();
	String BankName=bankListPage.getRecipientBankName();
	String toAccNumber=loginUsers.getJSONObject("GIRORecurringTransfer").getString("AccountNumber");
	bankListPage.enterAccountNumber(toAccNumber);
	String toAccName=loginUsers.getJSONObject("GIRORecurringTransfer").getString("AccountName");
	bankListPage.enterRecipientName(toAccName);
	enterAmountPage=bankListPage.clickNextButton();
	Assert.assertTrue(enterAmountPage.verifyEnterAmountPageDisplayed());
	String amount=randomString("numeric",2);
	transferDetailsPage=enterAmountPage.enterTransferAmount(amount);
	Assert.assertTrue(transferDetailsPage.verifyOtherAccountsTransferDetailsPageDisplayed());
//	String fromAccName_TD=transferDetailsPage.getTransferFromAccName();
//	String fromAccNumber_TD=transferDetailsPage.getTransferFromAccNumber();
//	softAssert.assertEquals(fromAccName_TD, fromAccName,"From Account Name on transfer details page is not matching");
//	softAssert.assertEquals(fromAccNumber_TD, fromAccNumber,"From Account Number on transfer details page is not matching");
	String toAccName_TD=transferDetailsPage.getTransferToAccName();
//  String toAccNumber_TD=transferDetailsPage.getTransferToAccNumber();
//	softAssert.assertEquals(toAccName_TD, toAccName,"To Account Name on transfer details page is not matching");
//	softAssert.assertEquals(toAccNumber_TD, toAccNumber,"To Account Number on transfer details page is not matching");
	String amount_TD=transferDetailsPage.getAmount();
	softAssert.assertEquals(amount_TD, amount.concat(".00"),"Amount on transfer details page is not matching");
	transferDetailsPage.clickTransferType();
	transferDetailsPage.selectFundTransfer();
	transferDetailsPage.clickTransferMode();
	transferDetailsPage.selectGIRO();
	String recieptReference=randomString("alphabetic",7);
	String paymentDetails=randomString("alphabetic",8);
	transferDetailsPage.enterReceiptRefrencePaymentDetails(recieptReference,paymentDetails);
	//transferDetailsPage.enterPaymentDetails(paymentDetails);
	transferDetailsPage.clickSetRecurringRdb();
	transferDetailsPage.clickAddFavTogglebtn();
	reviewDetailsPage=transferDetailsPage.clickContinueButton();
	Assert.assertTrue(reviewDetailsPage.verifyReviewDetailsPageDisplayed());
	String transferToHeader=reviewDetailsPage.getTransferToLabel();
	verifyText(transferToHeader,"Transfer To");
	verifyText(reviewDetailsPage.getTransferToAccountName(),toAccName_TD);
	softAssert.assertTrue(reviewDetailsPage.verifyStartDateLabelDisplayed(), "Start Date label on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyEndDateLabelDisplayed(), "End Date label on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyToAccountNumberLabelDisplayed(), "To Account number on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyRecipientBankLabelDisplayed(), "Recipient Bank Label on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNameLabelDisplayed(), "From Account Name on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNumberLabelDisplayed(), "From Account Number on review details is not displayed");
	//softAssert.assertTrue(reviewDetailsPage.verifyReciepientRefrenceLabelDisplayed(), "Recipient Reference on review details is not displayed");
	//softAssert.assertTrue(reviewDetailsPage.verifyPaymentDetailsLabelDisplayed(), "Payment Details on review details is not displayed");
	String amountRD=reviewDetailsPage.getAmount();
	verifyText(amount.concat(".00"),amountRD);
	String startDate=reviewDetailsPage.getStartDate();
	String endDate=reviewDetailsPage.getEndDate();
	verifyText(reviewDetailsPage.getToAccountNumber(),toAccNumber);
	verifyText(reviewDetailsPage.getRecipientBankValue(),BankName);
	verifyText(reviewDetailsPage.getFromAccountNameAccountName(),fromAccName);
	verifyText(reviewDetailsPage.getFromAccountNameAccountNumber(),fromAccNumber);
	//verifyText(reviewDetailsPage.getRecipientReferenceValue(),recieptReference);
	//verifyText(reviewDetailsPage.getPaymentDetailsValue(),paymentDetails);
	otpPage=reviewDetailsPage.clickContinueButton_FraudMakerFlow();
	otpPage.clickConfirm_btn();
	thankYouPage=otpPage.enterOTP_Transfers();
	Assert.assertTrue(thankYouPage.verifyThankYouPageDisplayed());
	verifyText(thankYouPage.getThankYouPageHeader(),"Sent For Approval");
	verifyTextContains(thankYouPage.getThankYouPageHeaderDate(),"Recurring Transfer");
	verifyTextContains(amount.concat(".00"),thankYouPage.getAmountValue());
	verifyText(thankYouPage.getStartDate(),startDate);
	verifyText(thankYouPage.getEndDate(),endDate);
	thankYouPage.getRefrenceIDValue();
	verifyText(thankYouPage.getStatusValue(),"Pending");
	softAssert.assertTrue(thankYouPage.verifyTransferToLabelDisplayed(),"Transfer To label on Thank you page is not displayed");
	verifyText(thankYouPage.getRecipientBank(),BankName);
	verifyText(thankYouPage.getTransferTypeValue(),"Funds Transfer");
	verifyText(thankYouPage.getTransferModeValue(),"GIRO");
	softAssert.assertTrue(thankYouPage.verifyFromAccountLabelDisplayed(),"From Account label on Thank you page is not displayed");
	softAssert.assertTrue(thankYouPage.verifyPaymentDetailsLabelDisplayed(),"Payment Details label on Thank you page is not displayed");
	softAssert.assertTrue(thankYouPage.verifyRecipientreferenceLabelDisplayed(),"Recipient Reference label on Thank you page is not displayed");
	String recipientRefernce_TQ=thankYouPage.getRecipientReferenceValue();
	
	verifyText(recipientRefernce_TQ,recieptReference);
	String paymentDetails_TQ=thankYouPage.getPaymentDetailsValue();
	verifyText(paymentDetails_TQ,paymentDetails);
	transferDashboardPage=thankYouPage.clickTransferDoneButton();
	Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
	dashboardPage=transferDashboardPage.clickBackbutton();
	dashboardPage.verifyBankingDashboardisplayed();
	changeToChecker();
	ApproveFirstRecord();
	softAssert.assertAll();
	
}

@Test(groups = {"RegressionTest"})	
public void tc009_Immediate_IBFT_Transfer() throws Throwable {
		
		SoftAssert softAssert=new SoftAssert();
		changeToMaker();
		transferDashboardPage=dashboardPage.clickTransferIcon();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		transferFromPage=transferDashboardPage.clickOthersAccountTransferIcon();
		Assert.assertTrue(transferFromPage.verifyTransferFromPageDisplayed());
		String fromAccName=transferFromPage.getAccountName();
		String fromAccNumber=transferFromPage.getAccountNumber();
		String availBal=transferFromPage.getAmount();
		bankListPage=transferFromPage.clickTransferFromAccountThirdPartyTrasfer();
		Assert.assertTrue(bankListPage.verifySelectRecipientBankNamePageDisplayed());
		bankListPage.enterSearchBankName(loginUsers.getJSONObject("IBFTImmediateTransfer").getString("BankName"));
		bankListPage.clickFirstBiller();
		String BankName=bankListPage.getRecipientBankName();
		String toAccNumber=loginUsers.getJSONObject("IBFTImmediateTransfer").getString("AccountNumber");
		bankListPage.enterAccountNumber(toAccNumber);
		String toAccName=loginUsers.getJSONObject("IBFTImmediateTransfer").getString("AccountName");
		bankListPage.enterRecipientName(toAccName);
		enterAmountPage=bankListPage.clickNextButton();
		Assert.assertTrue(enterAmountPage.verifyEnterAmountPageDisplayed());
		String amount=randomString("numeric",2);
		transferDetailsPage=enterAmountPage.enterTransferAmount(amount);
		Assert.assertTrue(transferDetailsPage.verifyOtherAccountsTransferDetailsPageDisplayed());
	//	String fromAccName_TD=transferDetailsPage.getTransferFromAccName();
	//	String fromAccNumber_TD=transferDetailsPage.getTransferFromAccNumber();
	//	softAssert.assertEquals(fromAccName_TD, fromAccName,"From Account Name on transfer details page is not matching");
	//	softAssert.assertEquals(fromAccNumber_TD, fromAccNumber,"From Account Number on transfer details page is not matching");
		String toAccName_TD=transferDetailsPage.getTransferToAccName();
	//  String toAccNumber_TD=transferDetailsPage.getTransferToAccNumber();
	//	softAssert.assertEquals(toAccName_TD, toAccName,"To Account Name on transfer details page is not matching");
	//	softAssert.assertEquals(toAccNumber_TD, toAccNumber,"To Account Number on transfer details page is not matching");

		String amount_TD=transferDetailsPage.getAmount();
		softAssert.assertEquals(amount_TD, amount.concat(".00"),"Amount on transfer details page is not matching");
		transferDetailsPage.clickTransferType();
		transferDetailsPage.selectFundTransfer();
		transferDetailsPage.clickTransferMode();
		transferDetailsPage.selectInstantTransfer();
		String recieptReference=randomString("alphabetic",7);
		String paymentDetails=randomString("alphabetic",8);
		transferDetailsPage.enterReceiptRefrencePaymentDetails(recieptReference,paymentDetails);
		//transferDetailsPage.enterPaymentDetails(paymentDetails);
		transferDetailsPage.clickAddFavTogglebtn();
		reviewDetailsPage=transferDetailsPage.clickContinueButton();
		Assert.assertTrue(reviewDetailsPage.verifyReviewDetailsPageDisplayed());
		String transferToHeader=reviewDetailsPage.getTransferToLabel();
		verifyText(transferToHeader,"Transfer To");
		verifyText(reviewDetailsPage.getTransferToAccountName(),toAccName_TD);
	//	softAssert.assertTrue(reviewDetailsPage.verifyScheduledForLabelDisplayed(), "Scheduled For label on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyToAccountNumberLabelDisplayed(), "To Account number on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyRecipientBankLabelDisplayed(), "Recipient Bank Label on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNameLabelDisplayed(), "From Account Name on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNumberLabelDisplayed(), "From Account Number on review details is not displayed");
		//softAssert.assertTrue(reviewDetailsPage.verifyReciepientRefrenceLabelDisplayed(), "Recipient Reference on review details is not displayed");
		//softAssert.assertTrue(reviewDetailsPage.verifyPaymentDetailsLabelDisplayed(), "Payment Details on review details is not displayed");
		String amountRD=reviewDetailsPage.getAmount();
		verifyText(amount.concat(".00"),amountRD);
		verifyText(reviewDetailsPage.getToAccountNumber(),toAccNumber);
		verifyText(reviewDetailsPage.getRecipientBankValue(),BankName);
		verifyText(reviewDetailsPage.getFromAccountNameAccountName(),fromAccName);
		verifyText(reviewDetailsPage.getFromAccountNameAccountNumber(),fromAccNumber);
		//verifyText(reviewDetailsPage.getRecipientReferenceValue(),recieptReference);
		//verifyText(reviewDetailsPage.getPaymentDetailsValue(),paymentDetails);
		otpPage=reviewDetailsPage.clickContinueButton_FraudMakerFlow();
		otpPage.clickConfirm_btn();
		thankYouPage=otpPage.enterOTP_Transfers();
		Assert.assertTrue(thankYouPage.verifyThankYouPageDisplayed());
		verifyText(thankYouPage.getThankYouPageHeader(),"Sent For Approval");
		verifyTextContains(thankYouPage.getThankYouPageHeaderDate(),"GIRO/Instant Transfer");
		verifyTextContains(amount.concat(".00"),thankYouPage.getAmountValue());
		thankYouPage.getRefrenceIDValue();
		verifyText(thankYouPage.getStatusValue(),"Pending");
		softAssert.assertTrue(thankYouPage.verifyTransferToLabelDisplayed(),"Transfer To label on Thank you page is not displayed");
		verifyText(thankYouPage.getRecipientBank(),BankName);
		verifyText(thankYouPage.getTransferTypeValue(),"Funds Transfer");
		verifyText(thankYouPage.getTransferModeValue(),"Instant Transfer");
		softAssert.assertTrue(thankYouPage.verifyFromAccountLabelDisplayed(),"From Account label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyPaymentDetailsLabelDisplayed(),"Payment Details label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyRecipientreferenceLabelDisplayed(),"Recipient Reference label on Thank you page is not displayed");
		String recipientRefernce_TQ=thankYouPage.getRecipientReferenceValue();
		verifyText(recipientRefernce_TQ,recieptReference);
		String paymentDetails_TQ=thankYouPage.getPaymentDetailsValue();
		verifyText(paymentDetails_TQ,paymentDetails);
		transferDashboardPage=thankYouPage.clickTransferDoneButton();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		dashboardPage=transferDashboardPage.clickBackbutton();
		dashboardPage.verifyBankingDashboardisplayed();
		changeToChecker();
		ApproveFirstRecord();
		softAssert.assertAll();
		
	}

@Test(groups = {"RegressionTest"})
public void tc010_Future_IBFT_Transfer() throws Throwable {
	
	SoftAssert softAssert=new SoftAssert();
	changeToMaker();
	transferDashboardPage=dashboardPage.clickTransferIcon();
	Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
	transferFromPage=transferDashboardPage.clickOthersAccountTransferIcon();
	Assert.assertTrue(transferFromPage.verifyTransferFromPageDisplayed());
	String fromAccName=transferFromPage.getAccountName();
	String fromAccNumber=transferFromPage.getAccountNumber();
	String availBal=transferFromPage.getAmount();
	bankListPage=transferFromPage.clickTransferFromAccountThirdPartyTrasfer();
	Assert.assertTrue(bankListPage.verifySelectRecipientBankNamePageDisplayed());
	bankListPage.enterSearchBankName(loginUsers.getJSONObject("IBFTFutureTransfer").getString("BankName"));
	bankListPage.clickFirstBiller();
	String BankName=bankListPage.getRecipientBankName();
	String toAccNumber=loginUsers.getJSONObject("IBFTFutureTransfer").getString("AccountNumber");
	bankListPage.enterAccountNumber(toAccNumber);
	String toAccName=loginUsers.getJSONObject("IBFTFutureTransfer").getString("AccountName");
	bankListPage.enterRecipientName(toAccName);
	enterAmountPage=bankListPage.clickNextButton();
	Assert.assertTrue(enterAmountPage.verifyEnterAmountPageDisplayed());
	String amount=randomString("numeric",2);
	transferDetailsPage=enterAmountPage.enterTransferAmount(amount);
	Assert.assertTrue(transferDetailsPage.verifyOtherAccountsTransferDetailsPageDisplayed());
//	String fromAccName_TD=transferDetailsPage.getTransferFromAccName();
//	String fromAccNumber_TD=transferDetailsPage.getTransferFromAccNumber();
//	softAssert.assertEquals(fromAccName_TD, fromAccName,"From Account Name on transfer details page is not matching");
//	softAssert.assertEquals(fromAccNumber_TD, fromAccNumber,"From Account Number on transfer details page is not matching");
	String toAccName_TD=transferDetailsPage.getTransferToAccName();
//  String toAccNumber_TD=transferDetailsPage.getTransferToAccNumber();
//	softAssert.assertEquals(toAccName_TD, toAccName,"To Account Name on transfer details page is not matching");
//	softAssert.assertEquals(toAccNumber_TD, toAccNumber,"To Account Number on transfer details page is not matching");
	String amount_TD=transferDetailsPage.getAmount();
	softAssert.assertEquals(amount_TD, amount.concat(".00"),"Amount on transfer details page is not matching");
	transferDetailsPage.clickTransferType();
	transferDetailsPage.selectFundTransfer();
	transferDetailsPage.clickTransferMode();
	transferDetailsPage.selectInstantTransfer();
	calenderPage=transferDetailsPage.clickCalender();
	transferDetailsPage=calenderPage.clickFutureTransferDate();
	String date=transferDetailsPage.getDate();
	String recieptReference=randomString("alphabetic",7);
	String paymentDetails=randomString("alphabetic",8);
	transferDetailsPage.enterReceiptRefrencePaymentDetails(recieptReference,paymentDetails);
	//transferDetailsPage.enterPaymentDetails(paymentDetails);
	transferDetailsPage.clickAddFavTogglebtn();
	reviewDetailsPage=transferDetailsPage.clickContinueButton();
	Assert.assertTrue(reviewDetailsPage.verifyReviewDetailsPageDisplayed());
	String transferToHeader=reviewDetailsPage.getTransferToLabel();
	verifyText(transferToHeader,"Transfer To");
	verifyText(reviewDetailsPage.getTransferToAccountName(),toAccName_TD);
	softAssert.assertTrue(reviewDetailsPage.verifyScheduledForLabelDisplayed(), "Scheduled For label on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyToAccountNumberLabelDisplayed(), "To Account number on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyRecipientBankLabelDisplayed(), "Recipient Bank Label on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNameLabelDisplayed(), "From Account Name on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNumberLabelDisplayed(), "From Account Number on review details is not displayed");
	//softAssert.assertTrue(reviewDetailsPage.verifyReciepientRefrenceLabelDisplayed(), "Recipient Reference on review details is not displayed");
	//softAssert.assertTrue(reviewDetailsPage.verifyPaymentDetailsLabelDisplayed(), "Payment Details on review details is not displayed");
	String amountRD=reviewDetailsPage.getAmount();
	verifyText(amount.concat(".00"),amountRD);
	verifyText(reviewDetailsPage.getScheduledForDate(),date);
	verifyText(reviewDetailsPage.getToAccountNumber(),toAccNumber);
	verifyText(reviewDetailsPage.getRecipientBankValue(),BankName);
	verifyText(reviewDetailsPage.getFromAccountNameAccountName(),fromAccName);
	verifyText(reviewDetailsPage.getFromAccountNameAccountNumber(),fromAccNumber);
	//verifyText(reviewDetailsPage.getRecipientReferenceValue(),recieptReference);
	//verifyText(reviewDetailsPage.getPaymentDetailsValue(),paymentDetails);
	otpPage=reviewDetailsPage.clickContinueButton_FraudMakerFlow();
	otpPage.clickConfirm_btn();
	thankYouPage=otpPage.enterOTP_Transfers();
	Assert.assertTrue(thankYouPage.verifyThankYouPageDisplayed());
	verifyText(thankYouPage.getThankYouPageHeader(),"Sent For Approval");
	verifyTextContains(thankYouPage.getThankYouPageHeaderDate(),"GIRO/Instant Transfer");
	verifyTextContains(amount.concat(".00"),thankYouPage.getAmountValue());
	verifyText(thankYouPage.getScheduledForDate(),date);
	thankYouPage.getRefrenceIDValue();
	verifyText(thankYouPage.getStatusValue(),"Pending");
	softAssert.assertTrue(thankYouPage.verifyTransferToLabelDisplayed(),"Transfer To label on Thank you page is not displayed");
	verifyText(thankYouPage.getRecipientBank(),BankName);
	verifyText(thankYouPage.getTransferTypeValue(),"Funds Transfer");
	verifyText(thankYouPage.getTransferModeValue(),"Instant Transfer");
	softAssert.assertTrue(thankYouPage.verifyFromAccountLabelDisplayed(),"From Account label on Thank you page is not displayed");
	softAssert.assertTrue(thankYouPage.verifyPaymentDetailsLabelDisplayed(),"Payment Details label on Thank you page is not displayed");
	softAssert.assertTrue(thankYouPage.verifyRecipientreferenceLabelDisplayed(),"Recipient Reference label on Thank you page is not displayed");
	String recipientRefernce_TQ=thankYouPage.getRecipientReferenceValue();
	verifyText(recipientRefernce_TQ,recieptReference);
	String paymentDetails_TQ=thankYouPage.getPaymentDetailsValue();
	verifyText(paymentDetails_TQ,paymentDetails);
	transferDashboardPage=thankYouPage.clickTransferDoneButton();
	Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
	dashboardPage=transferDashboardPage.clickBackbutton();
	dashboardPage.verifyBankingDashboardisplayed();
	changeToChecker();
	ApproveFirstRecord();
	softAssert.assertAll();
	
}

@Test(groups = { "SmokeTest","RegressionTest" })
public void tc011_Recurring_IBFT_Transfer() throws Throwable {
	
	SoftAssert softAssert=new SoftAssert();
	changeToMaker();
	transferDashboardPage=dashboardPage.clickTransferIcon();
	Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
	transferFromPage=transferDashboardPage.clickOthersAccountTransferIcon();
	Assert.assertTrue(transferFromPage.verifyTransferFromPageDisplayed());
	String fromAccName=transferFromPage.getAccountName();
	String fromAccNumber=transferFromPage.getAccountNumber();
	String availBal=transferFromPage.getAmount();
	bankListPage=transferFromPage.clickTransferFromAccountThirdPartyTrasfer();
	Assert.assertTrue(bankListPage.verifySelectRecipientBankNamePageDisplayed());
	bankListPage.enterSearchBankName(loginUsers.getJSONObject("IBFTRecurringTransfer").getString("BankName"));
	bankListPage.clickFirstBiller();
	String BankName=bankListPage.getRecipientBankName();
	String toAccNumber=loginUsers.getJSONObject("IBFTRecurringTransfer").getString("AccountNumber");
	bankListPage.enterAccountNumber(toAccNumber);
	String toAccName=loginUsers.getJSONObject("IBFTRecurringTransfer").getString("AccountName");
	bankListPage.enterRecipientName(toAccName);
	enterAmountPage=bankListPage.clickNextButton();
	Assert.assertTrue(enterAmountPage.verifyEnterAmountPageDisplayed());
	String amount=randomString("numeric",2);
	transferDetailsPage=enterAmountPage.enterTransferAmount(amount);
	Assert.assertTrue(transferDetailsPage.verifyOtherAccountsTransferDetailsPageDisplayed());
//	String fromAccName_TD=transferDetailsPage.getTransferFromAccName();
//	String fromAccNumber_TD=transferDetailsPage.getTransferFromAccNumber();
//	softAssert.assertEquals(fromAccName_TD, fromAccName,"From Account Name on transfer details page is not matching");
//	softAssert.assertEquals(fromAccNumber_TD, fromAccNumber,"From Account Number on transfer details page is not matching");
	String toAccName_TD=transferDetailsPage.getTransferToAccName();
//  String toAccNumber_TD=transferDetailsPage.getTransferToAccNumber();
//	softAssert.assertEquals(toAccName_TD, toAccName,"To Account Name on transfer details page is not matching");
//	softAssert.assertEquals(toAccNumber_TD, toAccNumber,"To Account Number on transfer details page is not matching");
	String amount_TD=transferDetailsPage.getAmount();
	softAssert.assertEquals(amount_TD, amount.concat(".00"),"Amount on transfer details page is not matching");
	transferDetailsPage.clickTransferType();
	transferDetailsPage.selectFundTransfer();
	transferDetailsPage.clickTransferMode();
	transferDetailsPage.selectInstantTransfer();
	String recieptReference=randomString("alphabetic",7);
	String paymentDetails=randomString("alphabetic",8);
	transferDetailsPage.enterReceiptRefrencePaymentDetails(recieptReference,paymentDetails);
	//transferDetailsPage.enterPaymentDetails(paymentDetails);
	transferDetailsPage.clickSetRecurringRdb();
	transferDetailsPage.clickAddFavTogglebtn();
	reviewDetailsPage=transferDetailsPage.clickContinueButton();
	Assert.assertTrue(reviewDetailsPage.verifyReviewDetailsPageDisplayed());
	String transferToHeader=reviewDetailsPage.getTransferToLabel();
	verifyText(transferToHeader,"Transfer To");
	verifyText(reviewDetailsPage.getTransferToAccountName(),toAccName_TD);
	softAssert.assertTrue(reviewDetailsPage.verifyStartDateLabelDisplayed(), "Start Date label on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyEndDateLabelDisplayed(), "End Date label on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyToAccountNumberLabelDisplayed(), "To Account number on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNameLabelDisplayed(), "From Account Name on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNumberLabelDisplayed(), "From Account Number on review details is not displayed");
	//softAssert.assertTrue(reviewDetailsPage.verifyReciepientRefrenceLabelDisplayed(), "Recipient Reference on review details is not displayed");
	//softAssert.assertTrue(reviewDetailsPage.verifyPaymentDetailsLabelDisplayed(), "Payment Details on review details is not displayed");
	String amountRD=reviewDetailsPage.getAmount();
	verifyText(amount.concat(".00"),amountRD);
	String startDate=reviewDetailsPage.getStartDate();
	String endDate=reviewDetailsPage.getEndDate();
	verifyText(reviewDetailsPage.getToAccountNumber(),toAccNumber);
	verifyText(reviewDetailsPage.getRecipientBankValue(),BankName);
	verifyText(reviewDetailsPage.getFromAccountNameAccountName(),fromAccName);
	verifyText(reviewDetailsPage.getFromAccountNameAccountNumber(),fromAccNumber);
	//verifyText(reviewDetailsPage.getRecipientReferenceValue(),recieptReference);
	//verifyText(reviewDetailsPage.getPaymentDetailsValue(),paymentDetails);
	otpPage=reviewDetailsPage.clickContinueButton_FraudMakerFlow();
	otpPage.clickConfirm_btn();
	thankYouPage=otpPage.enterOTP_Transfers();
	Assert.assertTrue(thankYouPage.verifyThankYouPageDisplayed());
	verifyText(thankYouPage.getThankYouPageHeader(),"Sent For Approval");
	verifyTextContains(thankYouPage.getThankYouPageHeaderDate(),"Recurring Transfer");
	verifyTextContains(amount.concat(".00"),thankYouPage.getAmountValue());
	verifyText(thankYouPage.getStartDate(),startDate);
	verifyText(thankYouPage.getEndDate(),endDate);
	thankYouPage.getRefrenceIDValue();
	verifyText(thankYouPage.getStatusValue(),"Pending");
	softAssert.assertTrue(thankYouPage.verifyTransferToLabelDisplayed(),"Transfer To label on Thank you page is not displayed");
	verifyText(thankYouPage.getRecipientBank(),BankName);
	softAssert.assertTrue(thankYouPage.verifyFromAccountLabelDisplayed(),"From Account label on Thank you page is not displayed");
	verifyText(thankYouPage.getTransferTypeValue(),"Funds Transfer");
	verifyText(thankYouPage.getTransferModeValue(),"Instant Transfer");
	softAssert.assertTrue(thankYouPage.verifyPaymentDetailsLabelDisplayed(),"Payment Details label on Thank you page is not displayed");
	softAssert.assertTrue(thankYouPage.verifyRecipientreferenceLabelDisplayed(),"Recipient Reference label on Thank you page is not displayed");
	String recipientRefernce_TQ=thankYouPage.getRecipientReferenceValue();	
	verifyText(recipientRefernce_TQ,recieptReference);
	String paymentDetails_TQ=thankYouPage.getPaymentDetailsValue();
	verifyText(paymentDetails_TQ,paymentDetails);
	transferDashboardPage=thankYouPage.clickTransferDoneButton();
	Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
	dashboardPage=transferDashboardPage.clickBackbutton();
	dashboardPage.verifyBankingDashboardisplayed();
	changeToChecker();
	ApproveFirstRecord();
	softAssert.assertAll();
	
}

@Test(groups = {"RegressionTest"})
public void tc012_Immediate_DuitNowMobile_Transfer() throws Throwable {
		
		SoftAssert softAssert=new SoftAssert();
		changeToMaker();
		transferDashboardPage=dashboardPage.clickTransferIcon();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		transferFromPage=transferDashboardPage.clickDuitNowTransfer();
		Assert.assertTrue(transferFromPage.verifyTransferFromPageDisplayed());
		String fromAccName=transferFromPage.getAccountName();
		String fromAccNumber=transferFromPage.getAccountNumber();
		String availBal=transferFromPage.getAmount();
		duitNowSelectIDPage=transferFromPage.clickTransferFromAccountDuitNowTrasfer();
		Assert.assertTrue(duitNowSelectIDPage.verifyDuitNowSelectIDTypePage());
		duitNowSelectIDPage.clickMobileNumber();
		String mobileNumber=loginUsers.getJSONObject("DuitNow").getString("MobileNumber");
		duitNowSelectIDPage.enterMobileNumber(mobileNumber);
		enterAmountPage=duitNowSelectIDPage.clickNextButton();
		Assert.assertTrue(enterAmountPage.verifyEnterAmountPageDisplayed());
		String amount=randomString("numeric",2);
		transferDetailsPage=enterAmountPage.enterTransferAmount(amount);
		Assert.assertTrue(transferDetailsPage.verifyDuitNowTransferDetailsPageDisplayed());
	//	String fromAccName_TD=transferDetailsPage.getTransferFromAccName();
	//	String fromAccNumber_TD=transferDetailsPage.getTransferFromAccNumber();
	//	softAssert.assertEquals(fromAccName_TD, fromAccName,"From Account Name on transfer details page is not matching");
	//	softAssert.assertEquals(fromAccNumber_TD, fromAccNumber,"From Account Number on transfer details page is not matching");
		String toAccName_TD=transferDetailsPage.getTransferToAccName();
	//  String toAccNumber_TD=transferDetailsPage.getTransferToAccNumber();
	//	softAssert.assertEquals(toAccName_TD, toAccName,"To Account Name on transfer details page is not matching");
	//	softAssert.assertEquals(toAccNumber_TD, toAccNumber,"To Account Number on transfer details page is not matching");

		String amount_TD=transferDetailsPage.getAmount();
		softAssert.assertEquals(amount_TD, amount.concat(".00"),"Amount on transfer details page is not matching");
		String recieptReference=randomString("alphabetic",7);
		String paymentDetails=randomString("alphabetic",8);
		transferDetailsPage.enterReceiptRefrencePaymentDetails(recieptReference,paymentDetails);
		//transferDetailsPage.enterPaymentDetails(paymentDetails);
		transferDetailsPage.clickAddFavTogglebtn();
		reviewDetailsPage=transferDetailsPage.clickContinueButton();
		Assert.assertTrue(reviewDetailsPage.verifyReviewDetailsPageDisplayed());
		String transferToHeader=reviewDetailsPage.getTransferToLabel();
		verifyText(transferToHeader,"Transfer To");
		verifyText(reviewDetailsPage.getTransferToAccountName(),toAccName_TD);
	//	softAssert.assertTrue(reviewDetailsPage.verifyScheduledForLabelDisplayed(), "Scheduled For label on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyMobileNumberLabelDisplayed(), "Mobile number on review details is not displayed");
	//	softAssert.assertTrue(reviewDetailsPage.verifyRecipientBankLabelDisplayed(), "Recipient Bank Label on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNameLabelDisplayed(), "From Account Name on review details is not displayed");
		softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNumberLabelDisplayed(), "From Account Number on review details is not displayed");
		//softAssert.assertTrue(reviewDetailsPage.verifyReciepientRefrenceLabelDisplayed(), "Recipient Reference on review details is not displayed");
		//softAssert.assertTrue(reviewDetailsPage.verifyPaymentDetailsLabelDisplayed(), "Payment Details on review details is not displayed");
		String amountRD=reviewDetailsPage.getAmount();
		verifyText(amount.concat(".00"),amountRD);
		//verifyText(reviewDetailsPage.getToAccountNumber(),2);
		verifyText(reviewDetailsPage.getMobileNumberValue(),mobileNumber);
		verifyText(reviewDetailsPage.getFromAccountNameAccountName(),fromAccName);
		verifyText(reviewDetailsPage.getFromAccountNameAccountNumber(),fromAccNumber);
		verifyText(reviewDetailsPage.getRecipientReferenceValue(),recieptReference);
		verifyText(reviewDetailsPage.getPaymentDetailsValue(),paymentDetails);
		otpPage=reviewDetailsPage.clickContinueButton_FraudMakerFlow();
		otpPage.clickConfirm_btn();
		thankYouPage=otpPage.enterOTP_Transfers();
		Assert.assertTrue(thankYouPage.verifyThankYouPageDisplayed());
		verifyText(thankYouPage.getThankYouPageHeader(),"Sent For Approval");
		verifyTextContains(thankYouPage.getThankYouPageHeaderDate(),"One Off DuitNow");
		verifyTextContains(amount.concat(".00"),thankYouPage.getAmountValue());
		thankYouPage.getRefrenceIDValue();
		verifyText(thankYouPage.getStatusValue(),"Pending");
		softAssert.assertTrue(thankYouPage.verifyRecipientLabelDisplayed(),"Recipient label on Thank you page is not displayed");
		verifyText(thankYouPage.getRecipientValue(),toAccName_TD);
		softAssert.assertTrue(thankYouPage.verifyMobileNmberLabelDisplayed(),"Mobile Number label on Thank you page is not displayed");
		verifyText(thankYouPage.getMobileNumberValue(),mobileNumber);
		softAssert.assertTrue(thankYouPage.verifyFromAccountLabelDisplayed(),"From Account label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyPaymentDetailsLabelDisplayed(),"Payment Details label on Thank you page is not displayed");
		softAssert.assertTrue(thankYouPage.verifyRecipientreferenceLabelDisplayed(),"Recipient Reference label on Thank you page is not displayed");
		String recipientRefernce_TQ=thankYouPage.getRecipientReferenceValue();
		verifyText(recipientRefernce_TQ,recieptReference);
		String paymentDetails_TQ=thankYouPage.getPaymentDetailsValue();
		verifyText(paymentDetails_TQ,paymentDetails);
		transferDashboardPage=thankYouPage.clickTransferDoneButton();
		Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
		dashboardPage=transferDashboardPage.clickBackbutton();
		dashboardPage.verifyBankingDashboardisplayed();
		changeToChecker();
		ApproveFirstRecord();
		softAssert.assertAll();
		
	}
@Test(groups = { "SmokeTest","RegressionTest" })
public void tc013_Future_DuitNow_Transfer() throws Throwable {
	
	SoftAssert softAssert=new SoftAssert();
	changeToMaker();
	transferDashboardPage=dashboardPage.clickTransferIcon();
	Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
	transferFromPage=transferDashboardPage.clickDuitNowTransfer();
	Assert.assertTrue(transferFromPage.verifyTransferFromPageDisplayed());
	String fromAccName=transferFromPage.getAccountName();
	String fromAccNumber=transferFromPage.getAccountNumber();
	String availBal=transferFromPage.getAmount();
	duitNowSelectIDPage=transferFromPage.clickTransferFromAccountDuitNowTrasfer();
	Assert.assertTrue(duitNowSelectIDPage.verifyDuitNowSelectIDTypePage());
	duitNowSelectIDPage.clickMobileNumber();
	String mobileNumber=loginUsers.getJSONObject("DuitNow").getString("MobileNumber");
	duitNowSelectIDPage.enterMobileNumber(mobileNumber);
	enterAmountPage=duitNowSelectIDPage.clickNextButton();
	Assert.assertTrue(enterAmountPage.verifyEnterAmountPageDisplayed());
	String amount=randomString("numeric",2);
	transferDetailsPage=enterAmountPage.enterTransferAmount(amount);
	Assert.assertTrue(transferDetailsPage.verifyDuitNowTransferDetailsPageDisplayed());
//	String fromAccName_TD=transferDetailsPage.getTransferFromAccName();
//	String fromAccNumber_TD=transferDetailsPage.getTransferFromAccNumber();
//	softAssert.assertEquals(fromAccName_TD, fromAccName,"From Account Name on transfer details page is not matching");
//	softAssert.assertEquals(fromAccNumber_TD, fromAccNumber,"From Account Number on transfer details page is not matching");
	String toAccName_TD=transferDetailsPage.getTransferToAccName();
//  String toAccNumber_TD=transferDetailsPage.getTransferToAccNumber();
//	softAssert.assertEquals(toAccName_TD, toAccName,"To Account Name on transfer details page is not matching");
//	softAssert.assertEquals(toAccNumber_TD, toAccNumber,"To Account Number on transfer details page is not matching");
	String amount_TD=transferDetailsPage.getAmount();
	softAssert.assertEquals(amount_TD, amount.concat(".00"),"Amount on transfer details page is not matching");
	calenderPage=transferDetailsPage.clickCalender();
	transferDetailsPage=calenderPage.clickFutureTransferDate();
	String date=transferDetailsPage.getDate();
	String recieptReference=randomString("alphabetic",7);
	String paymentDetails=randomString("alphabetic",8);
	transferDetailsPage.enterReceiptRefrencePaymentDetails(recieptReference,paymentDetails);
	//transferDetailsPage.enterPaymentDetails(paymentDetails);
	transferDetailsPage.clickAddFavTogglebtn();
	reviewDetailsPage=transferDetailsPage.clickContinueButton();
	Assert.assertTrue(reviewDetailsPage.verifyReviewDetailsPageDisplayed());
	String transferToHeader=reviewDetailsPage.getTransferToLabel();
	verifyText(transferToHeader,"Transfer To");
	verifyText(reviewDetailsPage.getTransferToAccountName(),toAccName_TD);
	softAssert.assertTrue(reviewDetailsPage.verifyScheduledForLabelDisplayed(), "Scheduled For label on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyMobileNumberLabelDisplayed(), "Mobile number on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNameLabelDisplayed(), "From Account Name on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNumberLabelDisplayed(), "From Account Number on review details is not displayed");
	//softAssert.assertTrue(reviewDetailsPage.verifyReciepientRefrenceLabelDisplayed(), "Recipient Reference on review details is not displayed");
	//softAssert.assertTrue(reviewDetailsPage.verifyPaymentDetailsLabelDisplayed(), "Payment Details on review details is not displayed");
	String amountRD=reviewDetailsPage.getAmount();
	verifyText(amount.concat(".00"),amountRD);
	verifyText(reviewDetailsPage.getScheduledForDate(),date);
	verifyText(reviewDetailsPage.getMobileNumberValue(),mobileNumber);
	verifyText(reviewDetailsPage.getFromAccountNameAccountName(),fromAccName);
	verifyText(reviewDetailsPage.getFromAccountNameAccountNumber(),fromAccNumber);
	//verifyText(reviewDetailsPage.getRecipientReferenceValue(),recieptReference);
	//verifyText(reviewDetailsPage.getPaymentDetailsValue(),paymentDetails);
	otpPage=reviewDetailsPage.clickContinueButton_FraudMakerFlow();
	otpPage.clickConfirm_btn();
	thankYouPage=otpPage.enterOTP_Transfers();
	Assert.assertTrue(thankYouPage.verifyThankYouPageDisplayed());
	verifyText(thankYouPage.getThankYouPageHeader(),"Sent For Approval");
	verifyTextContains(thankYouPage.getThankYouPageHeaderDate(),"One Off DuitNow");
	verifyTextContains(amount.concat(".00"),thankYouPage.getAmountValue());
	verifyText(thankYouPage.getScheduledForDate(),date);
	thankYouPage.getRefrenceIDValue();
	verifyText(thankYouPage.getStatusValue(),"Pending");
	softAssert.assertTrue(thankYouPage.verifyRecipientLabelDisplayed(),"Recipient label on Thank you page is not displayed");
	verifyText(thankYouPage.getRecipientValue(),toAccName_TD);
	softAssert.assertTrue(thankYouPage.verifyMobileNmberLabelDisplayed(),"Mobile Number label on Thank you page is not displayed");
	verifyText(thankYouPage.getMobileNumberValue(),mobileNumber);
	softAssert.assertTrue(thankYouPage.verifyFromAccountLabelDisplayed(),"From Account label on Thank you page is not displayed");
	softAssert.assertTrue(thankYouPage.verifyPaymentDetailsLabelDisplayed(),"Payment Details label on Thank you page is not displayed");
	softAssert.assertTrue(thankYouPage.verifyRecipientreferenceLabelDisplayed(),"Recipient Reference label on Thank you page is not displayed");
	String recipientRefernce_TQ=thankYouPage.getRecipientReferenceValue();
	verifyText(recipientRefernce_TQ,recieptReference);
	String paymentDetails_TQ=thankYouPage.getPaymentDetailsValue();
	verifyText(paymentDetails_TQ,paymentDetails);
	transferDashboardPage=thankYouPage.clickTransferDoneButton();
	Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
	dashboardPage=transferDashboardPage.clickBackbutton();
	dashboardPage.verifyBankingDashboardisplayed();
	changeToChecker();
	ApproveFirstRecord();
	softAssert.assertAll();
	
}

@Test(groups = {"RegressionTest"})
public void tc014_Recurring_DuitNow_Transfer() throws Throwable {
	
	SoftAssert softAssert=new SoftAssert();
	changeToMaker();
	transferDashboardPage=dashboardPage.clickTransferIcon();
	Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
	transferFromPage=transferDashboardPage.clickDuitNowTransfer();
	Assert.assertTrue(transferFromPage.verifyTransferFromPageDisplayed());
	String fromAccName=transferFromPage.getAccountName();
	String fromAccNumber=transferFromPage.getAccountNumber();
	String availBal=transferFromPage.getAmount();
	duitNowSelectIDPage=transferFromPage.clickTransferFromAccountDuitNowTrasfer();
	Assert.assertTrue(duitNowSelectIDPage.verifyDuitNowSelectIDTypePage());
	duitNowSelectIDPage.clickMobileNumber();
	String mobileNumber=loginUsers.getJSONObject("DuitNow").getString("MobileNumber");
	duitNowSelectIDPage.enterMobileNumber(mobileNumber);
	enterAmountPage=duitNowSelectIDPage.clickNextButton();
	Assert.assertTrue(enterAmountPage.verifyEnterAmountPageDisplayed());
	String amount=randomString("numeric",2);
	transferDetailsPage=enterAmountPage.enterTransferAmount(amount);
	Assert.assertTrue(transferDetailsPage.verifyDuitNowTransferDetailsPageDisplayed());
//	String fromAccName_TD=transferDetailsPage.getTransferFromAccName();
//	String fromAccNumber_TD=transferDetailsPage.getTransferFromAccNumber();
//	softAssert.assertEquals(fromAccName_TD, fromAccName,"From Account Name on transfer details page is not matching");
//	softAssert.assertEquals(fromAccNumber_TD, fromAccNumber,"From Account Number on transfer details page is not matching");
	String toAccName_TD=transferDetailsPage.getTransferToAccName();
//  String toAccNumber_TD=transferDetailsPage.getTransferToAccNumber();
//	softAssert.assertEquals(toAccName_TD, toAccName,"To Account Name on transfer details page is not matching");
//	softAssert.assertEquals(toAccNumber_TD, toAccNumber,"To Account Number on transfer details page is not matching");
	String amount_TD=transferDetailsPage.getAmount();
	softAssert.assertEquals(amount_TD, amount.concat(".00"),"Amount on transfer details page is not matching");
	String recieptReference=randomString("alphabetic",7);
	String paymentDetails=randomString("alphabetic",8);
	transferDetailsPage.enterReceiptRefrencePaymentDetails(recieptReference,paymentDetails);
	//transferDetailsPage.enterPaymentDetails(paymentDetails);
	transferDetailsPage.clickSetRecurringRdb();
	transferDetailsPage.clickAddFavTogglebtn();
	reviewDetailsPage=transferDetailsPage.clickContinueButton();
	Assert.assertTrue(reviewDetailsPage.verifyReviewDetailsPageDisplayed());
	String transferToHeader=reviewDetailsPage.getTransferToLabel();
	verifyText(transferToHeader,"Transfer To");
	verifyText(reviewDetailsPage.getTransferToAccountName(),toAccName_TD);
	softAssert.assertTrue(reviewDetailsPage.verifyStartDateLabelDisplayed(), "Start Date label on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyEndDateLabelDisplayed(), "End Date label on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyMobileNumberLabelDisplayed(), "Mobile number on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNameLabelDisplayed(), "From Account Name on review details is not displayed");
	softAssert.assertTrue(reviewDetailsPage.verifyFromAccountNumberLabelDisplayed(), "From Account Number on review details is not displayed");
	//softAssert.assertTrue(reviewDetailsPage.verifyReciepientRefrenceLabelDisplayed(), "Recipient Reference on review details is not displayed");
	//softAssert.assertTrue(reviewDetailsPage.verifyPaymentDetailsLabelDisplayed(), "Payment Details on review details is not displayed");
	String amountRD=reviewDetailsPage.getAmount();
	verifyText(amount.concat(".00"),amountRD);
	String startDate=reviewDetailsPage.getStartDate();
	String endDate=reviewDetailsPage.getEndDate();
	verifyText(reviewDetailsPage.getMobileNumberValue(),mobileNumber);
	verifyText(reviewDetailsPage.getFromAccountNameAccountName(),fromAccName);
	verifyText(reviewDetailsPage.getFromAccountNameAccountNumber(),fromAccNumber);
	//verifyText(reviewDetailsPage.getRecipientReferenceValue(),recieptReference);
	//verifyText(reviewDetailsPage.getPaymentDetailsValue(),paymentDetails);
	otpPage=reviewDetailsPage.clickContinueButton_FraudMakerFlow();
	otpPage.clickConfirm_btn();
	thankYouPage=otpPage.enterOTP_Transfers();
	Assert.assertTrue(thankYouPage.verifyThankYouPageDisplayed());
	verifyText(thankYouPage.getThankYouPageHeader(),"Sent For Approval");
	verifyTextContains(thankYouPage.getThankYouPageHeaderDate(),"Recurring DuitNow");
	verifyTextContains(amount.concat(".00"),thankYouPage.getAmountValue());
	verifyText(thankYouPage.getStartDate(),startDate);
	verifyText(thankYouPage.getEndDate(),endDate);
	thankYouPage.getRefrenceIDValue();
	verifyText(thankYouPage.getStatusValue(),"Pending");
	softAssert.assertTrue(thankYouPage.verifyRecipientLabelDisplayed(),"Recipient label on Thank you page is not displayed");
	verifyText(thankYouPage.getRecipientValue(),toAccName_TD);
	softAssert.assertTrue(thankYouPage.verifyMobileNmberLabelDisplayed(),"Mobile Number label on Thank you page is not displayed");
	verifyText(thankYouPage.getMobileNumberValue(),mobileNumber);
	softAssert.assertTrue(thankYouPage.verifyFromAccountLabelDisplayed(),"From Account label on Thank you page is not displayed");
	softAssert.assertTrue(thankYouPage.verifyPaymentDetailsLabelDisplayed(),"Payment Details label on Thank you page is not displayed");
	softAssert.assertTrue(thankYouPage.verifyRecipientreferenceLabelDisplayed(),"Recipient Reference label on Thank you page is not displayed");
	String recipientRefernce_TQ=thankYouPage.getRecipientReferenceValue();
	verifyText(recipientRefernce_TQ,recieptReference);
	String paymentDetails_TQ=thankYouPage.getPaymentDetailsValue();
	verifyText(paymentDetails_TQ,paymentDetails);
	transferDashboardPage=thankYouPage.clickTransferDoneButton();
	Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
	dashboardPage=transferDashboardPage.clickBackbutton();
	dashboardPage.verifyBankingDashboardisplayed();
	changeToChecker();
	ApproveFirstRecord();
	softAssert.assertAll();
	
}

public void tc015_Add_ThirdParty_Favourite() throws Throwable {
	
	SoftAssert softAssert=new SoftAssert();
	changeToMaker();
	transferDashboardPage=dashboardPage.clickTransferIcon();
	Assert.assertTrue(transferDashboardPage.verifyTransferDashboardisplayed());
	transferDashboardPage.clickAddNewFavourite();
	softAssert.assertAll();
}
public void changeToChecker() throws InterruptedException {
	controlCenterPage=dashboardPage.clickHelpButton();
	settingsPage=controlCenterPage.clickSettingsIcon();
	myDevicesPage=settingsPage.clickMyDevices();
	Assert.assertTrue(myDevicesPage.myDevicesPageDisplayed());
	MobileElement e=(MobileElement) getDriver().findElement(MobileBy.AndroidUIAutomator("new UiSelector().textContains(\"Current Device\")"));
	e.click();
	myDevicesPage.clickRemoveButton();
	myDevicesPage.clickYesButton();		
	String IntroPageTitle=loginPage.getIntroPageTitle();
	verifyText(IntroPageTitle,"Welcome");
	scrollToCard();
	loginPage.clickLoginToM2UBizButton();
	loginPage.enterUserName(loginUsers.getJSONObject("checkerCredentials").getString("username"));
	loginPage.clickNextbtn();
	loginPage.clickSecurityPhraseYesbtn();
	loginPage.enterPassword(loginUsers.getJSONObject("checkerCredentials").getString("password"));
		loginPage.clickNextPswdbtn();
		loginPage.clickSkipbtn();
		dashboardPage=loginPage.clickLetsStartbtn();
		Assert.assertTrue(dashboardPage.verifyBankingDashboardisplayed());
}
public void changeToMaker() throws InterruptedException {
	

	Boolean paymentIcon=false;
	loginPage.enterSubSequentPassword(loginUsers.getJSONObject("makerCredentials").getString("password"));
	dashboardPage=loginPage.clickLoginButton();
	paymentIcon=dashboardPage.verifyPaymentsIconDisplayed();
	if(paymentIcon==false) {
		controlCenterPage=dashboardPage.clickHelpButton();
		settingsPage=controlCenterPage.clickSettingsIcon();
		myDevicesPage=settingsPage.clickMyDevices();
		Assert.assertTrue(myDevicesPage.myDevicesPageDisplayed());
		MobileElement e=(MobileElement) getDriver().findElement(MobileBy.AndroidUIAutomator("new UiSelector().textContains(\"Current Device\")"));
		e.click();
		myDevicesPage.clickRemoveButton();
		myDevicesPage.clickYesButton();		
		String IntroPageTitle=loginPage.getIntroPageTitle();
		verifyText(IntroPageTitle,"Welcome");
		scrollToCard();
		loginPage.clickLoginToM2UBizButton();
		loginPage.enterUserName(loginUsers.getJSONObject("makerCredentials").getString("username"));
		loginPage.clickNextbtn();
		loginPage.clickSecurityPhraseYesbtn();

		loginPage.enterPassword(loginUsers.getJSONObject("makerCredentials").getString("password"));
			loginPage.clickNextPswdbtn();
			loginPage.clickSkipbtn();
			dashboardPage=loginPage.clickLetsStartbtn();
			Assert.assertTrue(dashboardPage.verifyBankingDashboardisplayed());
			}
	
}

public void ApproveFirstRecord() throws Throwable {
	approvalDashboardPage=dashboardPage.clickApprovalIcon();
	approvalDashboardPage.verifyApprovalDashboardisplayed();
	approvalFilterPage=approvalDashboardPage.clickOnFilter();
	
	//approvalDashboardPage.clickOnRecord();
	//approvalFilterPage.clickviewFilterbtn();
	approvalFilterPage.sortBybtn();
	approvalFilterPage.clickonLatest();
	approvalDashboardPage=approvalFilterPage.clickonApplyFilter();
	reviewDetailsPage=approvalDashboardPage.clickOnRecord();
	otpPage=reviewDetailsPage.clickApproveButton();
	otpPage.clickConfirm_btn();
	thankYouPage=otpPage.enterOTP_Transfers();
	thankYouPage.verifyThankYouPageDisplayed();
}


}
